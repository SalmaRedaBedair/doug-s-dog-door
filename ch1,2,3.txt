/* ch1 */
// encapsulation enable us to seperate part of code
// it make it easy to update
// if there is a part of code that i will use in diffrent places i can put it in
// class or function to not repeat it

// Delegation is when an object needs to A : Delegation is when an object needs
// to
// perform a certain task, and in stead of doing that
// task directly, it asks another object to handle the
// task (or sometimes just a part of t he task).

/* ch2 */
// A use case is a technique for capturing the
// potential requirements of a new system or software change.
// Each use case provides one or more scenarios that convey how
// the system should interact with the end user or another
// system to achieve a specific goal.
/// every use case has 3 parts
// 1-Clear Value
// Every use case must have a clear
// value to the system. If the use case
// doesn’t help the customer achieve their
// goal, then the use case isn’t of much use.
// 2-Start and Stop
// Every use case must have a definite
// starting and stopping point. Something
// must begin the process, and then there must be a
// condition that indicates that the process is complete.
// 3-External Initiator
// Every use case is started off by an external
// initiator, outside of the system. Sometimes
// that initiator is a person, but it could be
// anything outside of the system.

/* ch3 */
// substeps->optional
// they are in the left because they don't replace main bath
// alternative bath replace some steps in main bath but optional may be ocure
// additionally
//new use case need new requiremnts which lead to new code 
